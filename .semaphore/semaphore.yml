# copied from https://docs.semaphoreci.com/article/50-pipeline-yaml
# NodeJS and JavaScript docs
# https://docs.semaphoreci.com/article/82-language-javascript-and-nodejs
version: v1.0
name: Cypress example Kitchensink
agent:
  machine:
    type: e1-standard-2

  containers:
    # use Cypress-provided Docker image
    # https://github.com/cypress-io/cypress-docker-images
    - name: main
      image: 'cypress/browsers:node12.0.0-chrome75'

blocks:
  - name: E2E tests
    task:
      # see https://docs.semaphoreci.com/article/66-environment-variables-and-secrets
      secrets:
        # we have created new secrets object at https://cypress-io.semaphoreci.com/secrets/new
        # for this organization. In this job we can now access CYPRESS_RECORD_KEY
        - name: dashboard

      # common commands that should be done before each E2E test command
      prologue:
        commands:
          - checkout

          # from "How to Cache Cypress binary on Semaphore" documentation page
          # https://semaphoreci.com/docs/caching-between-builds.html#caching-cypress-binary
          - mkdir -p $SEMAPHORE_CACHE_DIR/Cypress
          - mkdir -p ~/.cache || true
          - ln -s $SEMAPHORE_CACHE_DIR/Cypress ~/.cache/Cypress

          # restore previously cached files if any
          # re-install dependencies if package.json or this semaphore YML file changes
          - cache restore npm-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json)-$(checksum .semaphore/semaphore.yml)
          - npm ci
          # verify the Cypress test binary so its check status is cached
          - npm run cy:verify
          - cache store npm-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json)-$(checksum .semaphore/semaphore.yml) ~/.npm

          # prints SEMAPHORE_* environment variables
          - npm run print-env -- SEMAPHORE
          # finally, build the web application and run end-to-end tests
          - npm run build
          # start the web application server in the background
          - npm run start:ci &

      jobs:
        # all "prologue" commands have finished by now
        # and we can define several jobs to execute in parallel on 3 machines
        # for Cypress https://on.cypress.io/parallelization we just need
        # to pass same "--ci-build-id" to link these parallel jobs together
        # on Semaphore V2 we can use the common SEMAPHORE_PIPELINE_ID value
        - name: Cypress E2E 1
          commands:
            # prints SEMAPHORE_* environment variables
            - npm run print-env -- SEMAPHORE
            - npm run e2e:record:parallel -- --ci-build-id $SEMAPHORE_PIPELINE_ID
        - name: Cypress E2E 2
          commands:
            # prints SEMAPHORE_* environment variables
            - npm run print-env -- SEMAPHORE
            - npm run e2e:record:parallel -- --ci-build-id $SEMAPHORE_PIPELINE_ID
        - name: Cypress E2E 3
          commands:
            # prints SEMAPHORE_* environment variables
            - npm run print-env -- SEMAPHORE
            - npm run e2e:record:parallel -- --ci-build-id $SEMAPHORE_PIPELINE_ID
